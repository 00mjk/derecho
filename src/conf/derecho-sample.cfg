[DERECHO]
# leader ip - the leader's ip address
leader_ip = 127.0.0.1
# leader gms port - the leader's gms port
leader_gms_port = 23580
# my local id - each node should have a different id
local_id = 0
# my local ip address
local_ip = 127.0.0.1
# derecho gms port
gms_port = 23580
# derecho rpc port
rpc_port = 28366
# sst tcp port
sst_port = 37683
# rdmc tcp port
rdmc_port = 31675
# maximum payload size
# Any message with size large than this has to be broken
# down to multiple messages.
# Large message consumes memory space because the memory buffers
# have to be pre-allocated.
max_payload_size = 10240
# maximum smc (SST's small message multicast) payload size
# If the message size is smaller or equal to this size,
# it will be sent using SST multicast, otherwise it will
# try RDMC if the message size is smaller than max_payload_size.
max_smc_payload_size = 10240
# block size depends on your max_payload_size.
# It is only relevant if you are every going to send a message using RDMC.
# In that case, it should be set to the same value as the max_payload_size,
# if the max_payload_size is around 1 MB. For very large messages, the block # size should be a few MBs (1 is fine).
block_size = 1048576
# message window size
# the length of the message pipeline
window_size = 16
# this is the frequency of the failure detector thread.
# It is best to leave this to 1 ms for RDMA. If it is too high,
# you run the risk of overflowing the queue of outstanding sends.
heartbeat_ms = 1
# the send algorithm for RDMC. Other options are
# chain_send, sequential_send, tree_send
rdmc_send_algorithm = binomial_send
# sst poll completion queue timeout in millisecond
sst_poll_cq_timeout_ms = 100

# RDMA section contains configurations of the following
# - which RDMA device to use
# - device configurations
[RDMA]
# provider = bgq|gni|mlx|netdir|psm|psm2|rxd|rxm|shm|sockets|udp|usnic|verbs
# possible options(only 'sockets' and 'verbs' providers are tested so far):
# bgq     - The Blue Gene/Q Fabric Provider
# gni     - The GNI Fabric Provider (Cray XC (TM) systems)
# mlx     - The MLX Fabric Provider (UCX library)
# netdir  - The Network Direct Fabric Provider (Microsoft Network Direct SPI)
# psm     - The PSM Fabric Provider
# psm2    - The PSM2 Fabric Provider
# rxd     - The RxD (RDM over DGRAM) Utility Provider
# rxm     - The RxM (RDM over MSG) Utility Provider
# shm     - The SHM Fabric Provider
# sockets - The Sockets Fabric Provider
# udp     - The UDP Fabric Provider
# usnic   - The usNIC Fabric Provider(Cisco VIC)
# verbs   - The Verbs Fabric Provider
provider = sockets

# domain
# For sockets provider, domain is the NIC name (ifconfig | grep -v -e "^ ")
# For verbs provider, domain is the device name (ibv_devices)
domain = eth0

# tx_depth 
# tx_depth applies to hints->tx_attr->size, where hint is a struct fi_info object.
# see https://ofiwg.github.io/libfabric/master/man/fi_getinfo.3.html
tx_depth = 256

# rx_depth
# rx_depth applies to hints->rx_attr->size, where hint is a struct fi_info object.
# see https://ofiwg.github.io/libfabric/master/man/fi_getinfo.3.html
rx_depth = 256

# Persistent configurations
[PERS]
# storage_type = filesystem|spdk
# storage_type specifies the persistent layer implementation. 
# filesystem - data will be persisted in the filesystem. Configurations in 
#              [PERS/filesystem] section will be loaded.
# spdk       - data will be persisted in a Non-Volatile Memory Express (NVMe)
#              device. Configurations in [PERS/spdk] will be loaded.
# default: filesystem
storage_type = filesystem
# default value is empty string.
# reset = true|false
# Reset persistent layer or not. 
# CAUTION: "reset = true" removes existing persisted data!!!
# default: false
reset = false
[.filesystem]
# persistent directory for file system-based logfile.
# default: .plog
file_path = .plog
# Max number of the log entries in each persistent<T>.
# default: 1M
max_log_entry = 1048576
# Max data size in bytes for each persistent<T>.
# default: 512G
max_data_size = 549755813888
[.spdk]
# trtype = pcie|rdma|fc|tcp
# trtype constrols the type of transport to be used with spdk. Refer to
# https://spdk.io/doc/nvme_8h.html#ae87a03c28984a2c0499d50ef5e9d0ece for more
# information.
# default: pcie (local PCIe card)
trtype = pcie
# adrfam = ipv4|ipv6|ib|fc|intra_host
# adrfam specifies the address family type. Refer to 
# https://spdk.io/doc/nvmf__spec_8h.html#a08f0090d242e2607ab11f148dcd797c6 for
# more information.
# default value is empty string.
adrfam = 
# traddr
# traddr specifies the address of the storage device. Refer to 
# https://spdk.io/doc/structspdk__nvme__transport__id.html#a4f8ed78319dff1a70923ab107c241b1b
# for more information
# default value is empty string.
traddr = 
# trsvcid
# trsvcid specifies the transport service id of the NVMe-oF endpoint. Refer to
# https://spdk.io/doc/structspdk__nvme__transport__id.html#a1d77d6f4fb1d3245f03a2e64a63ce64a
# for more information
trsvcid = 
# subnqn
# subnqn specifies the subsystem NQN of the NVMe-oF endpoint. Refer to
# https://spdk.io/doc/structspdk__nvme__transport__id.html#a2ea706c15041f428b933b44b2b81b2ae
# for more information
subnqn = 

# Logger configurations
[LOGGER]
# default log name
# default:derecho_debug
default_log_name = derecho_debug
# default log level
# Available options:
# trace,debug,info,warn,error,critical,off
# default: info
default_log_level = info
